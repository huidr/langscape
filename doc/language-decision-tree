*** Language Selection Decision Tree
  ┌── Long-lived?
  │   ├── Performance-critical?
  │   │   ├── Systems programming (OS/kernel/drivers)? → /C/, /Rust/, /Zig
  │   │   ├── High-throughput servers? → /Rust/, /Go/, /Java (JIT)/
  │   │   └── Numeric/scientific computing? → /Rust/, /Julia/, /C++/
  │   │  
  │   └── Needs easy distribution? 
  │       ├── Cross-platform GUI? → /Rust (Tauri)/, /C# (Avalonia)/,
  /Kotlin (Compose)/
  │       ├── CLI tool? → /Go (static binary)/, /Rust (clap)/, /OCaml/
  │       └── Embedded? → /C/, /Rust/, /Zig (no-std)/
  │ 
  └── Short-lived/throwaway?
      ├── Needs libraries/REPL? 
      │   ├── Data science/ML? → /Python/, /Julia/, /R/
      │   ├── Web scraping? → /Python (BeautifulSoup)/, /JavaScript (Puppeteer)
      │   └── Prototyping? → /Python/, /TypeScript/, /Clojure/
      │  
      └── Simple glue code?  
          ├── Shell scripting? → /Bash/, /Zsh/
          ├── Config/automation? → /Lua (Neovim)/, /Starlark (Bazel)/
          └── Text processing? → /Perl/, /Awk/, /Python/

*** Special Cases & Hybrid Workflows
#BEGIN_ASCII
  ┌── Web Development?  
  │   ├── Frontend → /TypeScript/, /Elm/, /PureScript/
  │   └── Backend → /Go/, /Rust (Actix)/, /Java (Spring)/
  │  
  ├── Concurrency-heavy?  
  │   ├── Distributed systems? → /Erlang/, /Elixir/, /Go/
  │   └── Parallel computing? → /Julia/, /C++ (TBB)/, /Java (ForkJoinPool)/
  │  
  └── Metaprogramming?  
      ├── Macros? → /Rust/, /Lisp/, /Julia/
      └── Codegen? → /Nim/, /C++ (templates)/, /TypeScript (tsc)/
#END_ASCII

#BEGIN_SRC text
  ┌── Web Development?  
  │   ├── Frontend → /TypeScript/, /Elm/, /PureScript/
  │   └── Backend → /Go/, /Rust (Actix)/, /Java (Spring)/
  │  
  ├── Concurrency-heavy?  
  │   ├── Distributed systems? → /Erlang/, /Elixir/, /Go/
  │   └── Parallel computing? → /Julia/, /C++ (TBB)/, /Java (ForkJoinPool)/
  │  
  └── Metaprogramming?  
      ├── Macros? → /Rust/, /Lisp/, /Julia/
      └── Codegen? → /Nim/, /C++ (templates)/, /TypeScript (tsc)/
#END_SRC


*** Key Annotations
1. /Performance-critical/ :: 
   - /Rust/ = Zero-cost abstractions, no GC
   - /C++/ = Mature but manual memory management
   - /Zig/ = Simpler alternative to C with comptime

2. /Easy distribution/ :: 
   - /Go/ = Single binary, cross-compilation built-in
   - /Java/ = "Write once, run anywhere" (needs JVM)	
