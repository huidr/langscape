#+title: Types of Programming Languages
#+author:
#+date: 2025-04-06

** Compiled languages
*** Those that compile to a single binary executable

- Language/compiler agnostic
  + A binary is just machine code (e.g., x86_64, ARM
    instructions). The OS doesn’t care if it came from C, Rust, or
    Haskell.
- Self-contained execution
  + Binaries embed everything needed to run (code, static data,
    OS-specific metadata). No external compiler/interpreter is
    required.
- OS handles execution directly
  + The OS loader reads the binary’s entry point (e.g., main’s
    address) and starts execution.
  + No file extension is needed because the OS checks the file header
    (e.g., ELF on Linux, PE on Windows) to confirm it’s executable.
- Require =main= (or equivalent): The OS needs a fixed entry point to
  start executing the binary.
  + The binary is a standalone executable, and the OS loader jumps
    directly to the =main= function’s address.
  + No compiler/interpreter needed at runtime: The binary contains
    machine code the OS can run natively.
- Binaries are OS-specific but self-contained.
- Binaries are faster (no interpreter/JIT overhead.)
- Binaries simplify deployment (no dependencies). No runtime setup.
- Examples with compilers:
  + C (=gcc=)
  + C++ (=gcc=)
  + Haskell (=ghc=)
  + Rust (=rustc=)

*** JIT-compiled languages

- No =main= (usually): Code is compiled at runtime, so execution
  starts dynamically.
  - The JIT compiler (e.g., Julia’s LLVM, Java’s JVM) manages
    execution.
  - Still requires a runtime: The OS runs the JIT compiler/runtime
    (e.g., julia, java), which then compiles/executes the code.
- Examples with compiler/runtime environments:
  + Java (JVM): Requires =main= for executables, but the JVM (not the
    OS) calls it.
  + Julia 
    
*** Intepreted languages

- No =main= function required: The interpreter executes the script
  line-by-line.
  + The interpreter (e.g., python, bash) controls execution flow, not
    the OS.
  + Interpreter must be installed: The OS runs the interpreter, which
    then runs the script.
- Examples with file extensions:
  + Bash (.sh)
  + Python (.py)

** Popular languages
*** Single Binary (AOT-Compiled)

These languages compile directly to machine code and produce
standalone executables.

| Language | Compiler/Toolchain             | Notes                                                     |
|----------+--------------------------------+-----------------------------------------------------------|
| C        | GCC, Clang, MSVC               | Classic AOT compilation                                   |
| C++      | GCC, Clang, MSVC               | Similar to C, with OOP/metaprogramming                    |
| Go       | go build (GC compiler)         | Statically linked binaries by default                     |
| Haskell  | GHC (Glasgow Haskell Compiler) | Compiles to native code (via C--/LLVM) or bytecode (GHCi) |
| Nim      | Nim compiler (C/JS backends)   | Can compile to C, then to binary                          |
| Rust     | rustc (LLVM-based)             | Comiles to native code with no runtime                    |
| Swift    | swifttc (LLVM-based)           | AOT for apps, JIT in playgrounds                          |
| Zig      | zig build-exe                  | AOT-compiled, ships with cross-compilation support        |

*** JIT-compiled

These languages compile to intermediate code, which is then
JIT-compiled at runtime.

| Language      | Runtime/JIT Engine                  | Notes                                               |
|---------------+-------------------------------------+-----------------------------------------------------|
| C#            | .NET CLR (RyūJIT)                   | JIT by default, AOT via .NET Native/ReadyToRun      |
| Java          | JVM (HotSpot, OpenJG)               | Starts as interpreted bytecode, then JITs hot code  |
| JavaScript    | V8 (Chrome), SpiderMonkey (Firefox) | Modern engines use tiered JIT (Ignition → TurboFan) |
| Julia         | Julia VM (LLVM JIT)                 | Compiles functions on first call                    |
| Lua (LuaJIT)  | LuaJIT                              | Extremely fast tracing JIT                          |
| Python (PyPy) | PyPy (RPython JIT)                  | Alternative to CPython with JIT optimizations       |
| R (FastR)     | GraalVM                             | Alternative R implementation with JIT               |

*** Runtime Environment (Bytecode + VM)

These languages compile to bytecode, which is executed by a virtual
machine (not strictly JIT).

| Language    | Runtime/VM              | Notes                                                    |
|-------------+-------------------------+----------------------------------------------------------|
| Clojure     | JVM                     | Runs on JVM as bytecode                                  |
| Erlang      | BEAM VM                 | Bytecode interpreted/JIT-optimized (HiPE)                |
| Kotlin      | JVM                     | Compiles to JVM bytecode (can also compile to JS/Native) |
| Scala       | JVM                     | Hybrid OOP/FP on JVM                                     |
| WebAssembly | WASM runtimes (wasmtime | Portable bytecode for browsers/servers                   |

*** Intepreted (no compilation)

These languages are executed line-by-line by an interpreter.

| Language     | Interpreter                  | Notes                                                  |
|--------------+------------------------------+--------------------------------------------------------|
| Python       | Cpython                      | Reference implementation (not JIT by default)          |
| Ruby         | MRI (Matz's Ruby Interpreter | Pure interpreter (JIT options via MJIT/TruffleRuby)    |
| Bash         | GNU Bash                     | Shell scripting language                               |
| R (GNU R)    | R interpreter                | Classic R implementation (no JIT)                      |
| Perl         | perl                         | Interpreted (JIT via rperl experimental)               |
| PHP          | Zend Engine                  | Traditionally interpreted (JIT in PHP 8+)              |
| Lua (PUC)    | PUC-Lua                      | Reference interpreter (no JIT)                         |
| Emacs Lisp   | Emacs                        | Interpreted (byte-compiled for speed)                  |
| Common Lisp  | SBCL, CLISP                  | Can be interpreted or compiled (AOT/JIT in some impls) |
| TypeScript   | tsc (compiles to JS)         | TS is transpiled to JS, then interpreted/JITed         |
| CoffeeScript | coffee (compiles to JS)      | TS is transpiled to JS, then interpreted/JITed         |

*** Special languages

| Language    | Classification               | Notes                                                      |
|-------------+------------------------------+------------------------------------------------------------|
| Assembly    | Machine code (via assembler) | Directly translated to binary (no abstraction)             |
| WebAssembly | Binary + JIT (in browsers)   | AOT-compiled to WASM, then JITed by browser engines        |
| Haskell     | Both AOT and interpreted     | GHC compiles to binary, but GHCi is interactive (bytecode) |
| Nim         | AOT or JS                    | Can compile to C (binary) or JavaScript                    |

** Which language to choose?
*** Quick guide

- Single Binary (AOT): Best for performance/deployment (C, Rust, Go)
- JIT: Balances speed and flexibility (Java, C#, Julia, JS)
- Runtime/VM: Portable bytecode (JVM, BEAM, WASM).
- Interpreted: Fast development, slower execution (Python, Bash).

*** Language selection decision tree

Check this out [[language-decision-tree.org][language-decision-tree.org]]


Is the tool/project:
├── **Long-lived?**  
│   ├── **Performance-critical?**  
│   │   ├── Systems programming (OS/kernel/drivers)? → **C**/**Rust**/**Zig**  
│   │   ├── High-throughput servers? → **Rust**/**Go**/**Java** (JIT)  
│   │   └── Numeric/scientific computing? → **Rust**/**Julia**/**C++**  
│   │  
│   └── **Needs easy distribution?**  
│       ├── Cross-platform GUI? → **Rust** (Tauri)/**C#** (Avalonia)/**Kotlin** (Compose)  
│       ├── CLI tool? → **Go** (static binary)/**Rust** (clap)/**OCaml**  
│       └── Embedded? → **C**/**Rust**/**Zig** (no-std)  
│  
└── **Short-lived/throwaway?**  
    ├── **Needs libraries/REPL?**  
    │   ├── Data science/ML? → **Python**/**Julia**/**R**  
    │   ├── Web scraping? → **Python** (BeautifulSoup)/**JavaScript** (Puppeteer)  
    │   └── Prototyping? → **Python**/**TypeScript**/**Clojure**  
    │  
    └── **Simple glue code?**  
        ├── Shell scripting? → **Bash**/**Zsh**  
        ├── Config/automation? → **Lua** (Neovim)/**Starlark** (Bazel)  
        └── Text processing? → **Perl**/**Awk**/**Python**


*** Language Selection Decision Tree
  ┌── Long-lived?  
  │   ├── Performance-critical?  
  │   │   ├── Systems programming (OS/kernel/drivers)? → /C/, /Rust/, /Zig/
  │   │   ├── High-throughput servers? → /Rust/, /Go/, /Java (JIT)/
  │   │   └── Numeric/scientific computing? → /Rust/, /Julia/, /C++/
  │   │  
  │   └── Needs easy distribution?  
  │       ├── Cross-platform GUI? → /Rust (Tauri)/, /C# (Avalonia)/, /Kotlin (Compose)/
  │       ├── CLI tool? → /Go (static binary)/, /Rust (clap)/, /OCaml/
  │       └── Embedded? → /C/, /Rust/, /Zig (no-std)/
  │  
  └── Short-lived/throwaway?  
      ├── Needs libraries/REPL?  
      │   ├── Data science/ML? → /Python/, /Julia/, /R/
      │   ├── Web scraping? → /Python (BeautifulSoup)/, /JavaScript (Puppeteer)/
      │   └── Prototyping? → /Python/, /TypeScript/, /Clojure/
      │  
      └── Simple glue code?  
          ├── Shell scripting? → /Bash/, /Zsh/
          ├── Config/automation? → /Lua (Neovim)/, /Starlark (Bazel)/
          └── Text processing? → /Perl/, /Awk/, /Python/

*** Special Cases & Hybrid Workflows
  ┌── Web Development?  
  │   ├── Frontend → /TypeScript/, /Elm/, /PureScript/
  │   └── Backend → /Go/, /Rust (Actix)/, /Java (Spring)/
  │  
  ├── Concurrency-heavy?  
  │   ├── Distributed systems? → /Erlang/, /Elixir/, /Go/
  │   └── Parallel computing? → /Julia/, /C++ (TBB)/, /Java (ForkJoinPool)/
  │  
  └── Metaprogramming?  
      ├── Macros? → /Rust/, /Lisp/, /Julia/
      └── Codegen? → /Nim/, /C++ (templates)/, /TypeScript (tsc)/

*** Key Annotations
1. /Performance-critical/ :: 
   - /Rust/ = Zero-cost abstractions, no GC
   - /C++/ = Mature but manual memory management
   - /Zig/ = Simpler alternative to C with comptime

2. /Easy distribution/ :: 
   - /Go/ = Single binary, cross-compilation built-in
   - /Java/ = "Write once, run anywhere" (needs JVM)	
